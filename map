using GMap.NET;
using GMap.NET.MapProviders;
using GMap.NET.WindowsForms;
using GMap.NET.WindowsForms.Markers;
using Google.Api.Ads.Common.Lib;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace deneme
{
    public partial class map : Form
    {
       private List<PointLatLng> _points;
        public map()
        {
            InitializeComponent();
            _points = new List<PointLatLng>();
        }

        private void map_Load(object sender, EventArgs e)
        { 
            
            GMapProviders.GoogleMap.ApiKey = AppConfig.Key;
            maps.DragButton = MouseButtons.Left;
            maps.MapProvider = GMapProviders.GoogleMap;

            maps.ShowCenter = false;
            maps.MinZoom = 10;
            maps.MaxZoom = 100;
            maps.Zoom = 15;

            // for start form in İzmit
            maps.SetPositionByKeywords("İzmit,Turkey");
        }

        private void button1_Click(object sender, EventArgs e)
        { // search button
           
            double lat = Convert.ToDouble(txtLat.Text);
            double longt = Convert.ToDouble(txtLong.Text);

            var point = new PointLatLng(Convert.ToDouble(txtLat.Text), Convert.ToDouble(txtLong.Text));
            LoadMap(point);
            AddMarker(point);
            
        }

        private void button2_Click(object sender, EventArgs e)
        {

           

        }

        private void button4_Click(object sender, EventArgs e)
        { //clear button
            _points.Clear();

        }

        private void button3_Click(object sender, EventArgs e)
        { // route button
           // Console.WriteLine(_points.Count());
            var route = GoogleMapProvider
                .Instance.GetRoute(_points[0], _points[_points.Count()-1], false, false, 14);
            var r = new GMapRoute(route.Points, "My Route")
            {
                Stroke = new Pen(Color.Red, 5)
            };

            var routes = new GMapOverlay("routes");
            routes.Routes.Add(r);
            maps.Overlays.Add(routes);
            lblDistance.Text = route.Distance + "KM";
        }

        private void button2_Click_1(object sender, EventArgs e)
        {
            _points.Add( new PointLatLng(Convert.ToDouble(txtLat.Text),
                  Convert.ToDouble(txtLong.Text)));
            Console.WriteLine(_points.Count());
        }

        private void maps_MouseClick(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {

               var point =  maps.FromLocalToLatLng(e.X, e.Y);
                double lat = point.Lat;
                double lng = point.Lng;

                txtLat.Text = lat+"";
                txtLong.Text = lng+"";
                //load location
                LoadMap(point);

                // adding marker
                AddMarker(point);

                // Get Address
              var addresses = GetAdress(point);

                // Display Address
                if (addresses != null)
                {
                    txtAddress.Text = "Address:  \n  ---------" +addresses[0];

                }
                else
                {
                    txtAddress.Text = "Unable to load address ";
                }
            }
        }
        private void LoadMap(PointLatLng point)
        {
            maps.Position = point;
        }
        private void AddMarker(PointLatLng pointToAdd,GMarkerGoogleType markerType= GMarkerGoogleType.arrow)
        {
            var markers = new GMapOverlay("markers");
            var marker = new GMarkerGoogle(pointToAdd, markerType);
            markers.Markers.Add(marker);
            maps.Overlays.Add(markers);
            // maps.ShowCenter = true;
            // maps.OnMarkerClick = true;

            //   Boolean doNotMoveCameraToCenterMarker = true;
       
        }
  

    private List<String> GetAdress(PointLatLng point)
        {
            List<Placemark> placemarks = null;
            var statusCode = GMapProviders.GoogleMap.GetPlacemarks(point,out placemarks);
            if (statusCode == GeoCoderStatusCode.OK && placemarks != null)
            {
                List<String> addresses = new List<String>();
                foreach (var placemark in placemarks)
                {
                    addresses.Add(placemark.Address);
                }
                return addresses;
            }
            return null;
           
        }

        private void button5_Click(object sender, EventArgs e)
        {
           // maps.GetPositionByKeywords(richTextBox1.Text, new PointLatLng(Convert.ToDouble(richTextBox1.Text)));
        }

        private void txtAddress_TextChanged(object sender, EventArgs e)
        {

        }
    }
}
